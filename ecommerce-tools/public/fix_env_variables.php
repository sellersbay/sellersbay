<?php
/**
 * Environment Variables Helper Script
 * 
 * This script helps diagnose and fix environment variable issues
 * that prevent the WooCommerce dashboard from loading on the PHP built-in server.
 */

header('Content-Type: text/html; charset=utf-8');
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "<!DOCTYPE html>
<html>
<head>
    <title>Fix Environment Variables</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        h1, h2 { color: #0073aa; }
        .success { color: green; background: #d4edda; padding: 10px; border-radius: 4px; margin-bottom: 10px; }
        .error { color: red; background: #f8d7da; padding: 10px; border-radius: 4px; margin-bottom: 10px; }
        .info { background: #e2f0fb; padding: 10px; border-radius: 4px; margin-bottom: 10px; }
        .code { background: #f5f5f5; padding: 15px; border: 1px solid #ddd; border-radius: 4px; 
                font-family: monospace; white-space: pre-wrap; overflow-x: auto; margin: 15px 0; }
        .warning { color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 4px; margin-bottom: 10px; }
    </style>
</head>
<body>
    <h1>Environment Variables Helper</h1>
    
    <div class='info'>
        <p>This script helps fix the DATABASE_URL environment variable issue that prevents the WooCommerce dashboard from loading.</p>
        <p>Root cause: When using the PHP built-in server (php -S), Symfony cannot find the DATABASE_URL environment variable.</p>
    </div>";

// Check if .env file exists
$envFile = dirname(__DIR__) . '/.env';
$envLocalFile = dirname(__DIR__) . '/.env.local';
$envLocalPhpFile = dirname(__DIR__) . '/.env.local.php';

if (file_exists($envFile)) {
    echo "<div class='success'>.env file exists at: " . htmlspecialchars($envFile) . "</div>";
    
    // Read DATABASE_URL from .env
    $envContents = file_get_contents($envFile);
    preg_match('/DATABASE_URL=([^\n]+)/', $envContents, $matches);
    
    if (isset($matches[1])) {
        $databaseUrl = trim($matches[1]);
        echo "<div class='success'>Found DATABASE_URL in .env: " . htmlspecialchars($databaseUrl) . "</div>";
    } else {
        echo "<div class='error'>Could not find DATABASE_URL in .env file.</div>";
        $databaseUrl = 'mysql://root@127.0.0.1:3306/roboseo2';
        echo "<div class='info'>Using default DATABASE_URL: " . htmlspecialchars($databaseUrl) . "</div>";
    }
} else {
    echo "<div class='error'>.env file does not exist!</div>";
    $databaseUrl = 'mysql://root@127.0.0.1:3306/roboseo2';
    echo "<div class='info'>Using default DATABASE_URL: " . htmlspecialchars($databaseUrl) . "</div>";
}

// Check for .env.local file
if (file_exists($envLocalFile)) {
    echo "<div class='success'>.env.local file exists at: " . htmlspecialchars($envLocalFile) . "</div>";
    
    // Read DATABASE_URL from .env.local (this might override .env)
    $envLocalContents = file_get_contents($envLocalFile);
    preg_match('/DATABASE_URL=([^\n]+)/', $envLocalContents, $matches);
    
    if (isset($matches[1])) {
        $databaseUrl = trim($matches[1]);
        echo "<div class='success'>Found DATABASE_URL in .env.local: " . htmlspecialchars($databaseUrl) . "</div>";
    }
} else {
    echo "<div class='info'>.env.local file does not exist (this is optional).</div>";
}

// Check for .env.local.php file
if (file_exists($envLocalPhpFile)) {
    echo "<div class='success'>.env.local.php file exists at: " . htmlspecialchars($envLocalPhpFile) . "</div>";
    echo "<div class='info'>This file might override environment variables in other .env files.</div>";
} else {
    echo "<div class='warning'>.env.local.php file does not exist.</div>";
    echo "<div class='info'>This file can be created to hardcode environment variables for production or development.</div>";
    
    // Generate sample .env.local.php content
    $envLocalPhpContent = "<?php
// This file was generated by fix_env_variables.php
// It hardcodes environment variables to fix issues with the PHP built-in server

return array(
    'APP_ENV' => 'dev',
    'APP_SECRET' => '".bin2hex(random_bytes(16))."',
    'DATABASE_URL' => '".addslashes($databaseUrl)."',
);
";

    echo "<h2>Solution: Create .env.local.php</h2>";
    echo "<div class='info'>
        <p>To fix the environment variable issue with the PHP built-in server, create a file named <strong>.env.local.php</strong> in the project root with the following content:</p>
    </div>";
    
    echo "<div class='code'>" . htmlspecialchars($envLocalPhpContent) . "</div>";
    
    echo "<div class='info'>
        <p>This file will be loaded by Symfony and provide the necessary environment variables even when using the PHP built-in server.</p>
        <p>After creating this file, restart your PHP server and try accessing the WooCommerce dashboard again.</p>
    </div>";
}

echo "<h2>Alternative Solutions</h2>";
echo "<div class='info'>
    <ol>
        <li><strong>Use XAMPP server on port 8000:</strong> The main server on port 8000 already works correctly with environment variables.</li>
        <li><strong>Set environment variables via command line:</strong> Before starting the PHP server, set the DATABASE_URL environment variable:
            <div class='code'>// On Windows CMD:
set DATABASE_URL=mysql://root@127.0.0.1:3306/roboseo2
php -S 127.0.0.1:8090 -t public

// On Windows PowerShell:
$env:DATABASE_URL=\"mysql://root@127.0.0.1:3306/roboseo2\"
php -S 127.0.0.1:8090 -t public</div>
        </li>
    </ol>
</div>";

echo "<h2>Final Diagnosis</h2>";
echo "<div class='info'>
    <p>The WooCommerce dashboard won't load on port 8090 because the PHP built-in server doesn't properly load the DATABASE_URL environment variable from .env files.</p>
    <p>This is a limitation of the PHP built-in server when used with Symfony, not an issue with the database or WooCommerce itself.</p>
    <p>To verify this, our direct database check script confirmed that:</p>
    <ul>
        <li>The MySQL database is running and accessible</li>
        <li>The WooCommerce tables exist and contain data</li>
        <li>There are " . htmlspecialchars("370 categories and 18 products") . " in the database</li>
    </ul>
    <p>The solutions above should fix the issue and allow the WooCommerce dashboard to load properly.</p>
</div>";

echo "</body></html>";